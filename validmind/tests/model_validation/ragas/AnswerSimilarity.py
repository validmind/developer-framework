# Copyright Â© 2023-2024 ValidMind Inc. All rights reserved.
# See the LICENSE file in the root of this repository for details.
# SPDX-License-Identifier: AGPL-3.0 AND ValidMind Commercial

import warnings

import plotly.express as px
from datasets import Dataset

from validmind import tags, tasks

from .utils import get_ragas_config, get_renamed_columns


@tags("ragas", "llm")
@tasks("text_qa", "text_generation", "text_summarization")
def AnswerSimilarity(
    dataset,
    answer_column="answer",
    ground_truth_column="ground_truth",
):
    """
    Calculates the semantic similarity between generated answers and ground truths

    The concept of Answer Semantic Similarity pertains to the assessment of the semantic
    resemblance between the generated answer and the ground truth. This evaluation is
    based on the `ground_truth` and the `answer`, with values falling within the range
    of 0 to 1. A higher score signifies a better alignment between the generated answer
    and the ground truth.

    Measuring the semantic similarity between answers can offer valuable insights into
    the quality of the generated response. This evaluation utilizes a cross-encoder
    model to calculate the semantic similarity score.

    See this paper for more details: https://arxiv.org/pdf/2108.06130.pdf

    The following steps are involved in computing the answer similarity score:
    1. Vectorize the ground truth answer using the specified embedding model.
    2. Vectorize the generated answer using the same embedding model.
    3. Compute the cosine similarity between the two vectors.

    ### Configuring Columns

    This metric requires the following columns in your dataset:

    - `answer` (str): The text response generated by the model.
    - `ground_truth` (str): The ground truth answer that the generated answer is compared
    against.

    If the above data is not in the appropriate column, you can specify different column
    names for these fields using the parameters `answer_column`, and `ground_truth_column`.

    For example, if your dataset has this data stored in different columns, you can
    pass the following parameters:
    ```python
    {
        "answer_column": "llm_output_col",
        "ground_truth_column": "my_ground_truth_col",
    }
    ```

    If answer is stored as a dictionary in another column, specify the column and key
    like this:
    ```python
    pred_col = dataset.prediction_column(model)
    params = {
        "answer_column": f"{pred_col}.generated_answer",
        "ground_truth_column": "my_ground_truth_col",
    }
    ```

    For more complex situations, you can use a function to extract the data:
    ```python
    pred_col = dataset.prediction_column(model)
    params = {
        "answer_column": lambda row: "\\n\\n".join(row[pred_col]["messages"]),
        "ground_truth_column": "my_ground_truth_col",
    }
    ```
    """
    try:
        from ragas import evaluate
        from ragas.metrics import answer_similarity
    except ImportError:
        raise ImportError("Please run `pip install validmind[llm]` to use LLM tests")

    warnings.filterwarnings(
        "ignore",
        category=FutureWarning,
        message="promote has been superseded by promote_options='default'.",
    )

    required_columns = {
        "answer": answer_column,
        "ground_truth": ground_truth_column,
    }

    df = get_renamed_columns(dataset._df, required_columns)

    result_df = evaluate(
        Dataset.from_pandas(df), metrics=[answer_similarity], **get_ragas_config()
    ).to_pandas()

    fig_histogram = px.histogram(x=result_df["answer_similarity"].to_list(), nbins=10)
    fig_box = px.box(x=result_df["answer_similarity"].to_list())

    return (
        {
            # "Scores (will not be uploaded to UI)": result_df[
            #     ["answer", "ground_truth", "answer_similarity"]
            # ],
            "Aggregate Scores": [
                {
                    "Mean Score": result_df["answer_similarity"].mean(),
                    "Median Score": result_df["answer_similarity"].median(),
                    "Max Score": result_df["answer_similarity"].max(),
                    "Min Score": result_df["answer_similarity"].min(),
                    "Standard Deviation": result_df["answer_similarity"].std(),
                    "Count": result_df.shape[0],
                }
            ],
        },
        fig_histogram,
        fig_box,
    )
