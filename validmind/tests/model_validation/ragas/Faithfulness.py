# Copyright Â© 2023-2024 ValidMind Inc. All rights reserved.
# See the LICENSE file in the root of this repository for details.
# SPDX-License-Identifier: AGPL-3.0 AND ValidMind Commercial

import warnings

import plotly.express as px
from datasets import Dataset

from validmind import tags, tasks

from .utils import get_ragas_config, get_renamed_columns


@tags("ragas", "llm", "rag_performance")
@tasks("text_qa", "text_generation", "text_summarization")
def Faithfulness(
    dataset,
    answer_column="answer",
    contexts_column="contexts",
):  # noqa
    """
    Evaluates the faithfulness of the generated answers with respect to retrieved contexts.

    This metric uses a judge LLM to measure the factual consistency of the generated answer
    against the given context(s). It is calculated using the generated text `answer` from
    the LLM and the retrieved `contexts` which come from some RAG process. The score is
    a value between 0 and 1, where a higher score indicates that the generated answer is
    more faithful to the given context(s).

    The generated answer is regarded as faithful if all the claims that are made in the
    answer can be inferred from the given context. To calculate this a set of claims from
    the generated answer is first identified. Then each one of these claims are cross checked
    with given context to determine if it can be inferred from given context or not. The
    faithfulness score formula is as follows:

    $$
    \\text{Faithfulness score} = {|\\text{Number of claims in the generated answer that can be inferred from given context}| \\over |\\text{Total number of claims in the generated answer}|}
    $$

    ### Configuring Columns

    This metric requires the following columns in your dataset:

    - `contexts` (List[str]): A list of text contexts which are retrieved to generate
    the answer.
    - `answer` (str): The response generated by the model which will be evaluated for
    faithfulness against the given contexts.

    If the above data is not in the appropriate column, you can specify different column
    names for these fields using the parameters `contexts_column` and `answer_column`.

    For example, if your dataset has this data stored in different columns, you can
    pass the following parameters:
    ```python
    {
        "contexts_column": "context_info"
        "answer_column": "my_answer_col",
    }
    ```

    If the data is stored as a dictionary in another column, specify the column and key
    like this:
    ```python
    pred_col = dataset.prediction_column(model)
    params = {
        "contexts_column": f"{pred_col}.contexts",
        "answer_column": f"{pred_col}.answer",
    }
    ```

    For more complex situations, you can use a function to extract the data:
    ```python
    pred_col = dataset.prediction_column(model)
    params = {
        "contexts_column": lambda row: [row[pred_col]["context_message"]],
        "answer_column": lambda row: "\\n\\n".join(row[pred_col]["messages"]),
    }
    ```
    """
    try:
        from ragas import evaluate
        from ragas.metrics import faithfulness
    except ImportError:
        raise ImportError("Please run `pip install validmind[llm]` to use LLM tests")

    warnings.filterwarnings(
        "ignore",
        category=FutureWarning,
        message="promote has been superseded by promote_options='default'.",
    )

    required_columns = {
        "answer": answer_column,
        "contexts": contexts_column,
    }

    df = get_renamed_columns(dataset._df, required_columns)

    result_df = evaluate(
        Dataset.from_pandas(df), metrics=[faithfulness], **get_ragas_config()
    ).to_pandas()

    fig_histogram = px.histogram(x=result_df["faithfulness"].to_list(), nbins=10)
    fig_box = px.box(x=result_df["faithfulness"].to_list())

    return (
        {
            # "Scores (will not be uploaded to UI)": result_df[
            #     ["contexts", "answer", "faithfulness"]
            # ],
            "Aggregate Scores": [
                {
                    "Mean Score": result_df["faithfulness"].mean(),
                    "Median Score": result_df["faithfulness"].median(),
                    "Max Score": result_df["faithfulness"].max(),
                    "Min Score": result_df["faithfulness"].min(),
                    "Standard Deviation": result_df["faithfulness"].std(),
                    "Count": result_df.shape[0],
                }
            ],
        },
        fig_histogram,
        fig_box,
    )
