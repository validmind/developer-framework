# Copyright © 2023-2024 ValidMind Inc. All rights reserved.
# See the LICENSE file in the root of this repository for details.
# SPDX-License-Identifier: AGPL-3.0 AND ValidMind Commercial

from dataclasses import dataclass

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

from validmind.vm_models import Figure, Metric


@dataclass
class ScorecardHistogram(Metric):
    """
    Creates histograms of credit scores, from both default and non-default instances, generated by a credit-risk model.

    **Purpose**: The Scorecard Histogram test metric provides a visual interpretation of the credit scores generated by
    a machine learning model for credit-risk classification tasks. It aims to compare the alignment of the model's
    scoring decisions with the actual outcomes of credit loan applications. It helps in identifying potential
    discrepancies between the model's predictions and real-world risk levels.

    **Test Mechanism**: This metric uses logistic regression to generate a histogram of credit scores for both default
    (negative class) and non-default (positive class) instances. Using both training and test datasets, the metric
    calculates the credit score of each instance with a scorecard method, considering the impact of different features
    on the likelihood of default. İncludes the default point to odds (PDO) scaling factor and predefined target score
    and odds settings. Histograms for training and test sets are computed and plotted separately to offer insights into
    the model's generalizability to unseen data.

    **Signs of High Risk**:
    - Discrepancies between the distributions of training and testing data, indicating a model's poor generalisation
    ability
    - Skewed distributions favouring specific scores or classes, representing potential bias

    **Strengths**:
    - Provides a visual interpretation of the model's credit scoring system, enhancing comprehension of model behavior
    - Enables a direct comparison between actual and predicted scores for both training and testing data
    - Its intuitive visualization helps understand the model's ability to differentiate between positive and negative
    classes
    - Can unveil patterns or anomalies not easily discerned through numerical metrics alone

    **Limitations**:
    - Despite its value for visual interpretation, it doesn't quantify the performance of the model, and therefore may
    lack precision for thorough model evaluation
    - The quality of input data can strongly influence the metric, as bias or noise in the data will affect both the
    score calculation and resultant histogram
    - Its specificity to credit scoring models limits its applicability across a wider variety of machine learning
    tasks and models
    - The metric's effectiveness is somewhat tied to the subjective interpretation of the analyst, since it relies on
    the analyst's judgment of the characteristics and implications of the plot.
    """

    name = "scorecard_histogram"
    required_inputs = ["model", "datasets"]
    metadata = {
        "task_types": ["classification"],
        "tags": ["tabular_data", "visualization", "credit_risk"],
    }
    default_params = {
        "title": "Histogram of Scores",
        "target_score": 600,
        "target_odds": 50,
        "pdo": 20,
    }

    @staticmethod
    def compute_scores(model, X, target_score, target_odds, pdo):
        X_copy = X.copy()
        beta = model.model.params.values
        alpha = model.model.params[0]
        factor = pdo / np.log(2)
        offset = target_score - (factor * np.log(target_odds))

        for _, row in X_copy.iterrows():
            score_i = 0
            for i in range(1, len(beta)):
                WoE_i = row[i]
                score_i += (beta[i] * WoE_i) * factor

            score_i += alpha * factor
            score_i += offset
            X_copy.loc[row.name, "score"] = score_i

        return X_copy

    @staticmethod
    def plot_score_histogram(df_train, df_test, score_col, target_col, title):
        scores_train_0 = df_train[df_train[target_col] == 0][score_col]
        scores_train_1 = df_train[df_train[target_col] == 1][score_col]
        scores_test_0 = df_test[df_test[target_col] == 0][score_col]
        scores_test_1 = df_test[df_test[target_col] == 1][score_col]

        fig = make_subplots(rows=1, cols=2, subplot_titles=("Train Data", "Test Data"))

        trace_train_0 = go.Histogram(
            x=scores_train_0, opacity=0.75, name=f"Train {target_col} = 0"
        )
        trace_train_1 = go.Histogram(
            x=scores_train_1, opacity=0.75, name=f"Train {target_col} = 1"
        )
        trace_test_0 = go.Histogram(
            x=scores_test_0, opacity=0.75, name=f"Test {target_col} = 0"
        )
        trace_test_1 = go.Histogram(
            x=scores_test_1, opacity=0.75, name=f"Test {target_col} = 1"
        )

        fig.add_trace(trace_train_0, row=1, col=1)
        fig.add_trace(trace_train_1, row=1, col=1)
        fig.add_trace(trace_test_0, row=1, col=2)
        fig.add_trace(trace_test_1, row=1, col=2)

        fig.update_layout(barmode="overlay", title_text=title)

        return fig

    def run(self):
        model = (
            self.inputs.model[0]
            if isinstance(self.inputs.model, list)
            else self.inputs.model
        )

        target_column = model.train_ds.target_column
        title = self.params["title"]
        target_score = self.params["target_score"]
        target_odds = self.params["target_odds"]
        pdo = self.params["pdo"]

        # Create a copy of training and testing dataframes
        df_train = self.inputs.datasets[0].df.copy()
        df_test = self.inputs.datasets[1].df.copy()

        # Drop target_column to create feature dataframes
        X_train = df_train.drop(columns=[target_column])
        X_test = df_test.drop(columns=[target_column])

        # Subset only target_column to create target dataframes
        y_train = df_train[[target_column]]
        y_test = df_test[[target_column]]

        X_train_scores = self.compute_scores(
            model, X_train, target_score, target_odds, pdo
        )
        X_test_scores = self.compute_scores(
            model, X_test, target_score, target_odds, pdo
        )

        df_train = pd.concat([X_train_scores, y_train], axis=1)
        df_test = pd.concat([X_test_scores, y_test], axis=1)

        fig = self.plot_score_histogram(
            df_train, df_test, "score", target_column, title
        )

        return self.cache_results(
            metric_value={
                "score_histogram": {
                    "train_scores": list(X_train_scores["score"]),
                    "test_scores": list(X_test_scores["score"]),
                },
            },
            figures=[
                Figure(
                    for_object=self,
                    key="score_histogram",
                    figure=fig,
                )
            ],
        )
